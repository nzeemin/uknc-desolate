
; Game main loop
;
L9DDD:
	MOVB	@#LDB7A, R0	; Get Health
	BNE	L9DDD1
	JMP	LB9A2		; zero => Player is dead
L9DDD1:
	CALL	LADE5		; Decode current room to LDBF5; HL = LDBF5
	CALL	LA88F		; Display 96 tiles on the screen
	CALL	LB96B		; Display Health
	CALL	LB8EA		; Show look/shoot selection indicator
	CALL	LB76B		; Process shoot
	CALL	LB551		; Process Alien in the room
	CALL	LA0F1		; Scan keyboard
;TODO: Process keys
	JMP	LA8C6		; Draw the Player, then go to the Ending of main game loop
;
; Ending of main game loop
L9E19:
	CALL	LB653		; Draw Alien
	CALL	LA0F1		; Scan keyboard
;TODO: Process keys
; Show the screen, continue the game main loop
L9E2E:
	CALL	SHOWSC		; Copy shadow screen to UKNC screen
	BR	L9DDD		; continue main game loop
;
; Quit menu item selected
L9E51:
;TODO
	RETURN
;
; Put tile on the screen (NOT aligned to 8px column), 16x16 -> 16x16 on shadow screen
; Uses XOR operation so it is revertable.
;   R3 = row; R2 = X coord; R1 = height; R4 = tile address
L9E5F:
	ADD	R3, R3
	MOV	MUL24D(R3), R3	; R3 = row * 24
	MOV	R2, R0		; get X coord, pixels
	BIC	#177770, R0	; offset within 8px column, 0..7
	ASR	R2
	ASR	R2
	ASR	R2		; R2 = number of 8px column
	ADD	R2, R3		; now R3 = offset on the shadow screen
	ADD	#SHADOW, R3	; R3 = address in the shadow screen
L9E8D:				; loop by R1 - by rows
	PUSH	R1
	MOV	(R4)+, R0	; get tile bits
	CLR	R2
	MOV	R5, R1		; get shift
	BEQ	L9E9D		; shift 0 => skip all shift ops
L9E96:				; shift bits
	ASR	R0
	RORB	R2
	SOB	R1, L9E96
L9E9D:
;TODO: put with XOR on the screen
	POP	R1
	SOB	R1, L9E8D	; continue loop by rows
	RETURN
;
; Put background tile on the screen, 16x16 -> 16x16 on shadow screen, no mask
;   R3 = row; R2 = tile column 0..11; R4 = tile address
L9EAD:
	ADD	R3, R3
	MOV	MUL24D(R3), R3	; R3 = row * 24
	ADD	R2, R3
	ADD	R2, R3
	ADD	#SHADOW, R3	; now R3 = shadow screen address
	MOV	#4., R1		; 4 * 4 = 16. rows
	MOV	#24., R2	; line increment
L9EAD1:
	MOV	(R4)+, (R3)	; 1st line
	ADD	R2, R3		; next line
	MOV	(R4)+, (R3)	; 2nd line
	ADD	R2, R3		; next line
	MOV	(R4)+, (R3)	; 3rd line
	ADD	R2, R3		; next line
	MOV	(R4)+, (R3)	; 4th line
	ADD	R2, R3		; next line
; Continue the loop
	SOB	R1, L9EAD1
	RETURN
;
; Draw sprite
;   R4 = sprite address; R2 = column; R3 = row
;   R0 = (was: bits 0..5 - sub-sprite); bit7=1 - reflect horz (was: bit6=1 - reflect vert)
L9EDE:
; Copy the sprite to the buffer
	MOV	#L9FAF, R5
	MOV	#8., R1
L9EDE1:	MOV	(R4)+, (R5)+
	MOV	(R4)+, (R5)+
	MOV	(R4)+, (R5)+
	MOV	(R4)+, (R5)+
	SOB	R1, L9EDE1
; Reflect the bits if needed
	BIT	#200, R0
	BEQ	L9EDE2
	CALL	L9EDER		; Reflect sprite horizontally
L9EDE2:
	ADD	R3, R3
	MOV	MUL24D(R3), R3	; R3 = row * 24
	ADD	R2, R3
	ADD	#SHADOW, R3
	MOV	#L9FAF, R4
; Copying to the shadow screen
	MOV	#8., R1		; 8 row pairs
	MOV	#24., R2	; line increment
L9EDE3:
; 1st line
	MOV	(R3), R0	; get shadow screen bits
	BIC	(R4)+, R0	; apply mask
	BIS	(R4)+, R0	; use pixels
	MOV	R0, (R3)	; write the result
	ADD	R2, R3		; next line
; 2nd line
	MOV	(R3), R0	; get shadow screen bits
	BIC	(R4)+, R0	; apply mask
	BIS	(R4)+, R0	; use pixels
	MOV	R0, (R3)	; write the result
	ADD	R2, R3		; next line
; Contine the loop
	SOB	R1, L9EDE3
	RETURN
L9FAF:
	.BLKB	64.
;
; Horizontal reflection
L9EDER:
	MOV	#L9FAF, R5
	MOV	#32., R4
L9EDES:
; ќбмен€ть мл/ст байты слова (R5), отразив оба байта
	MOV	(R5), R0
	MOV	R0, R1
	BIC	#177400, R0		; оставл€ем мл байт
	MOVB	FLIPAR(R0), R0		; отражаем байт через таблицу
	BIC	#177400, R0		; убираем возможное расширение знака
	SWAB	R1
	BIC	#177400, R1		; оставл€ем мл байт
	MOVB	FLIPAR(R1), R1		; отражаем байт через таблицу
	SWAB	R0
	BISB	R1, R0
	MOV	R0, (R5)+		; записываем результат и к следующему слову
; ѕродолжение цикла
	SOB	R4, L9EDES
	RETURN
;
; Copy shadow screen to UKNC screen
;
L9FEA=SHOWSC
;
; Clear shadow screen
; 128+10 lines, 24 8px columns; 24 * 138 = 3312 bytes
CLSHAD:
L9FCF:	MOV	#138., R1		; 24 * 138 = 3312
	MOV	#SHADOW, R3
L9FCF1:	CLR	(R3)+			; bytes 0-1
	CLR	(R3)+			; 2-3
	CLR	(R3)+			; 4-5
	CLR	(R3)+			; 6-7
	CLR	(R3)+			; 8-9
	CLR	(R3)+			; 10-11
	CLR	(R3)+			; 12-13
	CLR	(R3)+			; 14-15
	CLR	(R3)+			; 16-17
	CLR	(R3)+			; 18-19
	CLR	(R3)+			; 20-21
	CLR	(R3)+			; 22-23
	SOB	R1, L9FCF1
	RETURN

; Scan keyboard
; Returns key in A; Z=0 for key, Z=1 for no key
;
LA0F1:
	CLR	R0	;STUB
;TODO
	RETURN
;
; Display 96 tiles on the screen with background tiles (Tileset1)
;   R3 = Address where the 96 tiles are placed
LA88F:
	CLR	R1		; col
	CLR	R2		; row
LA892:	PUSH	R1
	PUSH	R3
	PUSH	R2
	MOVB	(R3), R4
	BEQ	LA8B0		; empty tile? => skip it
	CMP	R4, #107	; menu background tile?
	BNE	LA8921		; no => skip
LA88F2:	ADD	#000, R4	; add phase 000..007
LA8921:	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4		; now R4 = tile * 32
	ADD	#TILES1, R4
	MOV	R2, R3		; row
	MOV	R1, R2		; col
	CALL	L9EAD		; Put tile; R3 = row; R2 = col; R4 = tile address
LA8B0:	POP	R2
	POP	R3
	POP	R1
	INC	R3		; next tile
	INC	R1		; next col
	CMP	R1, #12.	; was last column?
	BNE	LA892		; no => continue the loop
	CLR	R1
	ADD	#16., R2	; next row
	CMPB	#128., R2	; was last tile row?
	BNE	LA892		; no => continue the loop
	RETURN
LDC55=LA88F2+2		; Menu background phase: 000..007
;
LA8C6:
	CLRB	@#LDD54			; clear animation phase
;
; Draw Player tiles
LA8CD:
	CLR	R1
	MOVB	@#LDD55, R0	; get shooting flag
	BEQ	LA8DF		; shooting animation? no => jump
	MOV	#LDE87, R3	; Table with Player's tile numbers
	MOV	@#LDB75, R0	; Direction/orientation
	ADD	R0, R0
	ADD	R0, R0		; now A = Direction * 4
	BR	LA8E9
LA8DF:
	MOV	#LDE47, R3	; Table with Player's tile numbers
	MOVB	@#LDB75, R0	; Direction/orientation
	ADD	R0, R0
	ADD	R0, R0
	ADD	R0, R0
	ADD	R0, R0		; now A = Direction * 16
LA8E9:
	ADD	R0, R3
	MOVB	@#LDD54, R0
	ADD	R0, R0
	ADD	R0, R0		; now R0 = R0 * 4
	ADD	R0, R3
	MOV	#4, R1		; 4 tiles
LA8F8:				; loop by B
	PUSH	R3
	MOVB	(R3), R4	; get sprite number
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4		; R4 = sprite * 64
	ADD	#SPRITE, R4	; now R3 = sprite address
	CALL	LA92E
	PUSH	R1
	CALL	LA956		; if looking left - set C bit7=1 to reflect tile horizontal
	MOV	R1, R0
	CALL	L9EDE		; Draw sprite R4; R2 = column; R3 = row
	POP	R1
	POP	R3
	INC	R3
	SOB	R1, LA8F8	; continue loop by tiles
	MOVB	@#LDD54, R0	; get animation phase 0..3
	CMP	R0, #003	; was last phase?
	BEQ	LA927		; yes => jump
	INC	R0		; next phase
	MOVB	R0, @#LDD54	; set animation phase
	CLRB	@#LDD55		; clear shooting flag for player's animation
	JMP	L9E19		; Go to ending of main game loop
LA927:
	CLRB	@#LDD54		; clear animation phase
	JMP	L9E19		; Go to ending of main game loop
;
LA92E:
	INC	R1
	MOVB	@#LDB76, R0	; get X coord in tiles
	ADD	R0, R0		; now coord in 8px columns
;TODO
LA941:
	MOVB	@#LDB75, R0	; Direction/orientation
	CMPB	R0, #002	; left?
	BEQ	LA94A
	ADD	#2, R3		; right
	RETURN
LA94A:
	SUB	#2, R3		; left
	RETURN
LA94C:
;TODO
;
LA956:
;TODO
	RETURN

;
; Get room offset in tiles for X = LDB76, Y = LDB78
;   Returns the room offset in E, A, and LDC56
LAA9D:
;TODO
	RETURN
;
; Look / Shoot key pressed
LAAAF:
;TODO
	RETURN
; Show the screen, continue the game main loop
LAADA:
	JMP	L9E2E		; Show the screen, continue the game main loop
; Found the action point for the current position in the room description
LAADD:
;TODO
	JMP	L9E2E		; Show the screen, continue the game main loop
;
; Show small message popup
LAB28:
	PUSH	R1
	PUSh	R2
	MOV	#LEB27, R3	; Decode from: Small message popup
	CALL	LADEE		; Decode 96 bytes of the screen to LDBF5
	CALL	LB177		; Display screen HL from tiles with Tileset2
	POP	R2
	POP	R1
	RETURN
;
; Found action point at room description offset $00..$01
LAB3F:
	RETURN
;
; Set penRow/penCol for small message popup
LAB73:
	MOV	#54020, @#L86D7	; Set penRow/penCol
	RETURN
;
LAB7A:
;TODO
;
; Found action point at room description offset $03..$04
LABA4:
;TODO
;
; Found action point at room description offset $19..$1A
LABBE:
;TODO
;
; Found action point at room description offset $21..$22 (possibly an error, should be $20-$21)
LAC05:
;TODO
;
; Compare byte at (HL+DE) with Direction/orientation LDB75
;TODO
;
; Found action point at room description offset $06..$07
LAC54:
;TODO
; Found dead body with some item on it
LAC97:
;TODO
	JMP	LAD00
;
; Show arrow sign in bottom-right corner, as a prompt to continue
LACB8:
	MOV	#063260, @#L86D7	; Set penRow/penCol
	MOV	#SE0B9, R3	; String with arrow down sign
	JMP	LBEDE		; Show message char-by-char
;
; Small message popup "OMG! This Person Is DEAD! What Happened Here!?!"
LACC5:
	CALL	LAB28		; Show small message popup
	CALL	LAB73		; Set penRow/penCol for small message popup
	MOV	#SE0BF, R3
	CALL	LBEDE		; Show message char-by-char
	MOV	#63022, @#L86D7	; Set penRow/penCol
	MOV	#SE0C1, R3	; "What Happened Here!?!"
	CALL	LBEDE		; Show message char-by-char
	CALL	LACB8		; Show arrow sign as prompt to continue
	JMP	LAD00
;
; Found action point at room description offset $0B..$0C
LACE3:
;TODO
;
; Show screen, wait for any key, show small message popup
LACF6:
	CALL	SHOWSC		; Copy shadow screen to UKNC screen
	CALL	WAITAN		; Wait any key
	JMP	LAB28		; Show small message popup
;
LAD00:
;TODO
	RETURN
;
; Get inventory item flag for item number in LDC89
LAD4F:
;TODO
;
LAD5B:
;TODO
;
; Show screen and wait for Escape key
LAD8C:
	CALL	SHOWSC		; Copy shadow screen to UKNC screen
LAD8F:
;TODO
;
; Wait for Escape key
LADA1:
	CALL	LA0F1		; Scan keyboard
;TODO
	RETURN
;
; We found the weapon
LADA9:
;TODO
	RETURN
;
; Decode current room to LDBF5
;   Returns: R3 = LDBF5
LADE5:
	MOVB	@#LDB79, R0	; Get the room number
	MOV	#LDE97, R3	; List of encoded room addresses
	CALL	LADFF		; now R3 = encoded room address
; Entry point: Decode 96 bytes to LDBF5
LADEE:
	MOV	#96., R1	; decode 96 bytes
; Decode the room/screen to LDBF5
;   R3 = decode from; R1 = tile count to decode
;   Returns: R3 = LDBF5
LADF5:
	MOV	#LDBF5, R2
	CALL	LB9F1		; Decode the room/screen
	MOV	#LDBF5, R3
	RETURN
;
; Get address from table
;   R0 = Element number
;   R3 = Table address
LADFF:
	ADD	R0, R0
	ADD	R0, R3
	MOV	(R3), R3
	RETURN
;
; Decode current room description to LDBF5
;   Returns: R3 = LDBF5
LAE09:
	MOVB	@#LDB79, R0	; Get room number
	MOV	#LDF27, R3	; Table of adresses for room descriptions
	CALL	LADFF		; Get address from table by index A
	MOV	#49., R1	; decode 49 bytes
	BR	LADF5		; Decode the room/screen to LDBF5
;
; Inventory item to item description string
LAE19:
	MOVB	@#LDC89, R0	; get current item number
	MOV	#LDFB7, R3
	JMP	LADFF		; Get address from table by index A, and return
;
; Check access and show Door Lock
;   LDC8B - Access code slot number
LAE23:
;TODO
; Door Lock loop starts here
LAE80:
;TODO
; Delay and wait for key in Door Lock
LAE99:
;TODO
; Door Lock Select key pressed
LAEBA:
;TODO
	RETURN
;
; Access code entered, need to check
LAF14:
;TODO
; Invalid Code
LAF1D:
;TODO
; Validate the code entered
LAF2C:
;TODO
	RETURN
;
; Draw selection box by XOR
LAFD2:
;TODO
	RETURN
;
; LDC8C access code level -> address from LE015 table
LAFEC:
;TODO
	RETURN
;
; LDC8C access code level -> message address from LE01F table
LAFFE:
;TODO
	RETURN
;
; LDC8C access code level -> "access code was entered for this level before" flag address
; Returns: HL = address
; DoorLockGetEnteredFlagAddr:
DRGEFA:
;TODO
	RETURN
;
; Going to the next room
LB00E:
;TODO
	RETURN
;
; Decrease Health by 4, restore Y coord
LB07B:
	MOV	#2, R1
LB07D:
	CALL	LB994		; Decrease Health
	SOB	R1, LB07D
	POP	R0
	MOVB	R0, @#LDB78	; set Y tile coord
	POP	R0
	MOVB	R0, @#LDB77	; set Y pixel coord
	JMP	LA8CD
;
; Decrease Health by 4, restore X coord
LB08D:
	MOV	#2, R1
LB08F:
	CALL	LB994		; Decrease Health
	SOB	R1, LB08F
	POP	R0
	MOVB	R0, @#LDB76
	JMP	LA8CD
;
; Door Lock: Preparing to draw string with prompt/result
LB09B:
;TODO
	RETURN
;
; Open the Inventory pop-up
;
LB0A2:
	MOV	#LF329, R3	; Encoded screen for Inventory/Info popup
	CALL	LADEE		; Decode 96 bytes of the screen to LDBF5
	CALL	LB177		; Display screen HL from tiles with Tileset 2
	MOVB	#22., @#LDCF3	; Left margin size for text
	MOVB	#12., @#LDCF4	; Line interval for text
	CLRB	@#LDCF5		; Data cartridge reader slot??
	CLRB	@#LDC59		; set delay factor
	CLRB	@#LDC5A		; clear Inventory items count
	CLRB	@#LDCF8
	MOVB	#16., @#LDC83	; set X pos
	MOVB	#24., @#LDC84	; set Y pos
	MOV	#13060, @#L86D7	; Set penRow/penCol
	MOV	#SE0BB, R3	; "- INVENTORY -"
	CALL	DRSTR
	MOV	#LDB9C, R3
	MOV	#29., R1
LB0E0:				; loop by B
;TODO
	RETURN

;
; Draw tile by XOR using X = (LDC83), Y = (LDC84), then go to next position
LB15D:
;TODO
	RETURN

; Display screen from tiles with Tileset2
;   R3 = Screen in tiles, usually LDBF5
LB177:
	CLR	R1		; col
	CLR	R2		; row
LB1770:
	PUSH	R1
	PUSH	R2
	MOVB	(R3)+, R4
	PUSH	R3		; store tile address
	CMPB	#001, R4
	BEQ	LB1771
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4
	ADD	R4, R4		; now R4 = tile * 64
	ADD	#TILES2, R4	; R4 = tile address
	MOV	R2, R3		; row
	MOV	R1, R2		; col
	CALL	DRTIL2		; Draw tile from Tileset2; R3 = row, R2 = col, R4 = tile addr
LB1771:	POP	R3		; restore tile address
	POP	R2		; restore row
	POP	R1		; restore col
	ADD	#16., R1	; next col
	CMP	R1, #<16.*12.>	; end of line?
	BNE	LB1770		; no => continue the loop
	CLR	R1
	ADD	#16., R2	; next row
	CMPB	#128., R2	; last row?
	BNE	LB1770		; no => continue the loop
	RETURN

; Delay by LDC59
LB2D0:
	MOVB	@#LDC59, R2
LB2D00:

;TODO
	RETURN

;
; Process alien in the room
LB551:
;TODO
	RETURN

LB653:
;TODO
	RETURN

;
; Process shoot within the game main loop
;
LB76B:
;TODO
	RETURN

;
; Show look/shoot selection indicator
;
LB8EA:
;TODO
	RETURN

;
; Display Health
LB96B:
;TODO
	RETURN
;
; Draw 5-digit number R3 at row/col R2, and show the screen
LB97D:
	MOV	R2, @#L86D7	; set penRow/penCol
	CALL	DRNUM5
	JMP	SHOWSC		; Copy shadow screen to ZX screen
;
; Decrease Health
LB994:
	MOVB	@#LDB7A, R0	; get Health
	SUB	#2, R0		; Health = Health minus 2
	BHIS	LB9941
	CLR	R0
LB9941:	MOVB	R0, @#LDB7A	; set Health
; Set border to red as an indication of the injury
;TODO: Indicate we had injures
	RETURN
;
; Player is dead, Health 0
;
LB9A2:
	CALL	CLSHAD		; Clear Shadow Screen
;TODO
	RETURN
;
; Clear player variables
LB9D6:
	CLRB	@#LDB79		; set the room number
	CLRB	@#LDB75		; Direction/orientation
	MOVB	#6, @#LDB76	; set X tile coord = 6
	MOVB	#48., @#LDB77	; set Y pixel coord = 48
	MOVB	#3, @#LDB78	; set Y tile coord = 3
	MOV	#100.,@#LDB7A	; set Health = 100
	RETURN
;
; Decode the block from RLE sequence
;   R3 = address decode from (usually encoded room/screen)
;   R2 = address decode to
;   R1 = number of bytes to decode
LB9F1:	MOVB	(R3)+, R0
	CMPB	R0, #377	; repeater?
	BEQ	LB9F13
	MOVB	R0, (R2)+
	SOB	R1, LB9F1
LB9F11:	RETURN
LB9F13:	MOVB	(R3)+, R0
	BIC	#177400, R0
	INC	R3
LB9F14:	DEC	R3
	MOVB	(R3)+, (R2)+
	DEC	R1
	BEQ	LB9F11
	SOB	R0, LB9F14
	BR	LB9F1
;
; Show titles and show Menu
LBA07:
	MOVB	#68., @#LDC59	; set delay factor
	MOVB	#1, @#LDC85	; Use delay and copy screen in LBEDE
	MOV	#35036, @#L86D7	; Set penRow/penCol
	MOV	#SE09D, R3	; "MaxCoderz Presents"
	CALL	LBEDE		; Show message char-by-char
	CALL	LBA81		; Delay x40
	CALL	LBC7D		; Clear shadow screen and copy to UKNC screen
	CALL	LBC34		; Delay x20
	MOV	#35056, @#L86D7 ; Set penRow/penCol
	MOV	#SE09F, R3	; "a tr1p1ea game"
	CALL	LBEDE		; Show message char-by-char
	CALL	LBA81		; Delay x40
	CALL	LBC7D		; Clear shadow screen and copy to UKNC screen
	CALL	LBC34		; Delay x20
	CLRB	@#LDC85		; Skip delay and copy screen in LBEDE
;TODO:	CALL	ScreenThemeLite	; switching to the light theme on Main Menu
	BR	LBA3D		; Return to Menu
;
MenuFromGame:
	MOV	#<072+12.>, @#LDB8F	; "Continue" menu item -> set Menu Y pos
;
; Return to Menu
;
LBA3D:
	MOVB	@#LDC55, R0	; get Menu background phase
	INC	R0
	BIC	#177770, R0
	MOVB	R0, @#LDC55	; set Menu background phase
;	DI
	MOV	#LF515, R3	; Main menu screen moving background, 96 tiles
	CALL	LA88F		; Display 96 tiles on the screen
	MOV	#LF4B5, R3	; Main menu screen
;	EI
	CALL	LB177		; Display screen HL from tiles with Tileset 2
;TODO
	CALL	SHOWSC		; Copy shadow screen to UKNC screen
	CALL	LA0F1		; Scan keyboard
;TODO

	BR	LBA3D

;
; New Game
;
LBADE:
	CLRB	@#LDCF7		; clear Weapon slot
	CLRB	@#LDB7D		; set look/shoot switch value = Look
	CLRB	@#LDBC7		; clear Items Found count
	CALL	LB9D6		; Clear player variables
	CLR	@#LDBC3		; clear Player deaths count
	CLR	@#LDBC5		; clear Aliens Killed count
	MOV	#LDB9C, R3	; Inventory table address
	MOV	#34., R1	; 34 bytes
LBAF9:	CLRB	(R3)+
	SOB	R1, LBAF9
	MOV	#LDC5B, R3
	MOV	#34., R1
LBB03:	CLRB	(R3)+
	SOB	R1, LBB03
	MOV	#LDB90, R3
	MOV	#9., R1		; 9 variables to clear
LBB09:	CLRB	(R3)+
	SOB	R1, LBB09
	MOV	#LDCA2, R3	; Table with Access code slots
	MOV	#72., R1	; 72 bytes
LBB17:	CLRB	(R3)+
	SOB	R1, LBB17
	MOV	#<DLLENT+1>, R3	;   ld hl,DoorLockLevelEntered+1
	MOV	#4, R1
LBADE5:	CLRB	(R3)+		; Clear 4 flags
	SOB	R1, LBADE5
	MOV	#LDC96, R3	; level 2 access code buffer
	CALL	LBC6B		; Generate random code
	MOV	#LDC9A, R3	; level 3 access code buffer
	CALL	LBC6B		; Generate random code
	MOV	#LDC9E, R3	; level 4 access code buffer
	CALL	LBC6B		; Generate random code
	CALL	LBC7D		; Clear shadow screen and copy to UKNC screen
;TODO:	CALL	ScreenThemeNite	; switching to dark theme for story mode
	MOVB	#68., @#LDC59	; set delay factor
	MOVB	#1, @#LDC85	; Use delay and copy screen in LBEDE
	MOVB	#14., @#LDCF4	; set Line interval for text
	CLRB	@#LDCF3		; clear Left margin size for text
	MOV	#35024, @#L86D7	; Set penRow/penCol
	MOV	#SE115, R3	; "In the Distant Future . . ."
	CALL	LBEDE		; Show message char-by-char
	CALL	LBA81		; Delay x40
	CALL	LBC7D		; Clear shadow screen and copy to UKNC screen
	CALL	LBA81		; Delay x40
	CLR	@#L86D7		; Set zero penRow/penCol
	MOV	#SE117, R3	; "'The Desolate' Space Cruiser leaves orbit. ...
	CALL	LBEDE		; Show message char-by-char
	MOV	#71266, @#L86D7	; Set penRow/penCol
	MOV	#SE0B9, R3	; String with arrow down sign
	CALL	LBEDE		; Show message char-by-char
	CALL	WTKEY		; Wait for any key
	CALL	CLSHAD		; ClearShadowScreen
	CLR	@#L86D7		; Set zero penRow/penCol
	MOV	#SE119, R3	; "The ship sustains heavy damage. ...
	CALL	LBEDE		; Show message char-by-char
	CALL	WTKEY		; Wait for any key
;
; Game start
;
LBB7E:
	CLRB	@#LDC85		; Skip delay and copy screen in LBEDE
; Continue menu item selected
LBB82:
	CALL	LBC7D		; Clear shadow screen and copy to UKNC screen
;TODO:	CALL	ScreenThemeLite	; switching to light theme opening the game screen
	MOVB	#001, @#LDB73
	MOVB	#377, @#LDC59	; set delay factor
	CALL	LB2D0		; Delay
	JMP	L9DDD		; return to the main game loop

;
; Info menu item, show Controls
;
LBBEC:
	MOV	#LF329, R3	; Decode from - Encoded screen for Inventory/Info popup
	CALL	LADEE		; Decode 96 bytes of the screen to LDBF5
	CALL	LB177		; Display screen HL from tiles with Tileset 2
	MOVB	#10., @#LDCF3	; Left margin size for text
	MOVB	#14., @#LDCF4	; Line interval for text
	MOV	#013074, @#L86D7  ; Set penRow/penCol
	MOV	#SE0A5, R3	; "- Controls -"
	CALL	DRSTR		; Show message char-by-char
	MOV	#022012, @#L86D7  ; Set penRow/penCol
	MOV	#SE0A7, R3	; "2nd = Look / Shoot Alpha = Inventory ..."
	CALL	LBEDE		; Show message char-by-char
	CALL	SHOWSC		; Copy shadow screen to UKNC screen
	CALL	LADA1		; Wait for Escape key
	JMP	LBA3D		; Return to Menu
;
; Delay x40
LBA81:
	CALL	LBC34		; Delay x20
; Delay x20
LBC34:
	MOV	#20., R1	; x20
LBC36:
	CALL	LB2D0		; Delay
	SOB	R1, LBC36
	RETURN
;
; Draw access code, 4 chars
;   HL = access code buffer address
LBC3C:
;TODO
	RETURN
;
; Generate random access code
;   HL = 4-byte buffer address
LBC6B:
;TODO
	RETURN
;
; Clear shadow screen and copy to UKNC screen
LBC7D:
	CALL	CLSHAD		; Clear shadow screen
	JMP	SHOWSC		; Copy shadow screen to UKNC screen

; Draw string on the screen
;   R3 = String address
LBEDE:
	MOVB	(R3)+, R0
	BNE	LBEDE1
	RETURN
LBEDE1:	CMPB	R0, #174	; CP 7Ch	; '|' - line end ?
	BEQ	LBF1B
	PUSH	R3
	CALL	DRCHAR
	MOVB	@#LDC85, R0		; get Delay and copy screen flag
	BEQ	LBEF91
	CALL	LB2D0			; Delay
	CALL	SHOWSC			; Copy shadow screen to UKNC screen
LBEF91:
	POP	R3
	BR	LBEDE
LBF1B:					; Line end
	PUSH	R1
	MOVB	@#L86D8, R1		; Get penRow 0..127
	MOVB	@#LDCF4, R0		; Line interval for text
	ADD	R1, R0
	MOVB	R0, @#L86D8		; Set penRow
	MOVB	@#LDCF3, @#L86D7	; Get left margin size for text -> set penCol
	POP	R1
	BR	LBEDE

	RETURN
;
; Set variables for Credits
LBF54:
	CLRB	@#LDD57		; clear Credits line number
	CLRB	@#LDD56		; clear Credits counter within one line
	CLRB	@#LDC85		; Skip delay and copy screen in LBEDE
	MOVB	#150., @#LDC59	; set delay factor
	RETURN
;
; Credits menu item selected
LBF64:
	CALL	LBC7D		; Clear and show shadow screen
;TODO:	CALL	ScreenThemeNite	; switching to dark theme for Credits
	CALL	LBF54		; Set variables for Credits
	JMP	LBF81		; Credits screen text scrolls up
;
; The End
;
LBF6F:
	CALL	LBC7D		; Clear and show shadow screen
;TODO:	CALL	ScreenThemeNite	; switching to dark theme for End and Credits
	CALL	LBF54		; Set variables for Credits
	MOV	#027106, @#L86D7	; Set penRow/penCol
	MOV	#SE11F, R3	; "The End"
	CALL	LBEDE		; Show message char-by-char
;
; Credits screen text scrolls up
;
LBF81:
	MOVB	#126., @#L86D8	; Set penRow, to draw new strings on the very bottom
LBF686:
	BR	LBF6F4
LBF6F2:
	CALL	SHOWSC		; Copy shadow screen to ZX screen
LBF6F3:
	CALL	LA0F1		; Scan keyboard
	BNE	CREXIT		; any key pressed => Return to main Menu
	CALL	LBFD5		; Scroll shadow screen up one line
LBF6F4:
	MOVB	@#LDD56, R0
	INC	R0		; increase counter within the line
	MOVB	R0, @#LDD56
	CMP	R0, #12.	; last line of the current string?
	BEQ	CREDS5		; yes => jump
	CALL	LB2D0		; Delay
	BR	LBF6F2		; continue the Credits loop
CREDS5:
	CLRB	@#LDD56		; clear counter within the line
	MOVB	@#LDD57, R2
	ADD	#LDDF2, R2	; Table of left margins for Credits strings
	MOVB	(R2), @#L86D7	; Set penCol
	MOVB	@#LDD57, R0	; get Credits line number
	MOV	#LDD58, R3	; Table of Credits strings
	CALL	LADFF		; Get address from table HL by index A
	CALL	DRSTR		; Draw string on shadow screen without any delays
	MOVB	@#LDD57, R0
	INC	R0		; increase the Credits line counter
	MOVB	R0, @#LDD57
	CMP	R0, #73.
	BNE	LBF6F3
	CALL	LBA81		; Delay x40 - added to have a pause after the last line
CREXIT:
	CALL	LBC7D		; Clear and show shadow screen
;TODO:	CALL	ScreenThemeLite	; switching to light theme for Main Menu
	JMP	LBA3D		; Return to main Menu
;
; Scroll shadow screen up 1px
LBFD5:
	MOV	#SHADOW, R2
	MOV	#<SHADOW+24.>, R3
	MOV	#411., R1	; 137 * 24 / 8 = 411.
LBFD51:
	MOV	(R3)+, (R2)+
	MOV	(R3)+, (R2)+
	MOV	(R3)+, (R2)+
	MOV	(R3)+, (R2)+
	SOB	R1, LBFD51
	RETURN

;----------------------------------------------------------------------------
